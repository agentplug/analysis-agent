[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "analysis-agent"
version = "1.0.0"
description = "A modular analysis agent that provides text analysis, insights, and multi-step problem solving with tool integration"
readme = "README.md"
license = "MIT"
authors = [
    {name = "agentplug", email = "contact@agentplug.com"}
]
maintainers = [
    {name = "agentplug", email = "contact@agentplug.com"}
]
keywords = ["text-analysis", "insights", "ai-assistant", "agent", "tool-integration", "mcp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.11"
dependencies = [
    "aisuite[openai]>=0.1.11",
    "python-dotenv>=1.1.1",
    "docstring-parser>=0.17.0",
    "mcp>=1.14.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0"
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0"
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0"
]

[project.urls]
Homepage = "https://github.com/agentplug/analysis-agent"
Repository = "https://github.com/agentplug/analysis-agent"
Documentation = "https://github.com/agentplug/analysis-agent#readme"
Issues = "https://github.com/agentplug/analysis-agent/issues"

[project.scripts]
analysis-agent = "agent:main"

[tool.setuptools]
packages = ["agent_modules", "agent_modules.core", "agent_modules.execution", "agent_modules.planning", "agent_modules.analysis", "agent_modules.utils"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.md"]

# Black formatting configuration
[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | \.pytest_cache
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["agent_modules", "agent.py"]

# Flake8 linting configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info"
]

# MyPy type checking configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "aisuite.*",
    "mcp.*",
    "docstring_parser.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=agent_modules",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["agent_modules"]
omit = [
    "*/__pycache__/*",
    "*/tests/*",
    "*/.venv/*",
    "*/venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Note: Pre-commit configuration should be placed in .pre-commit-config.yaml file
